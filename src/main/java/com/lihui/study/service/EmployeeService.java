/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lihui.study.service;

import com.lihui.study.pb.EmployeePb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
public class EmployeeService {

  public interface Iface {

    public java.util.List<EmployeePb> getEmpByEmpIds(java.util.List<java.lang.String> employeeIds) throws org.apache.thrift.TException;

    public EmployeePb getEmpByEmpId(java.lang.String employeeId, java.lang.String employeeCode) throws org.apache.thrift.TException;

    public void saveEmployee(EmployeePb employeePb) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getEmpByEmpIds(java.util.List<java.lang.String> employeeIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeePb>> resultHandler) throws org.apache.thrift.TException;

    public void getEmpByEmpId(java.lang.String employeeId, java.lang.String employeeCode, org.apache.thrift.async.AsyncMethodCallback<EmployeePb> resultHandler) throws org.apache.thrift.TException;

    public void saveEmployee(EmployeePb employeePb, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<EmployeePb> getEmpByEmpIds(java.util.List<java.lang.String> employeeIds) throws org.apache.thrift.TException
    {
      send_getEmpByEmpIds(employeeIds);
      return recv_getEmpByEmpIds();
    }

    public void send_getEmpByEmpIds(java.util.List<java.lang.String> employeeIds) throws org.apache.thrift.TException
    {
      getEmpByEmpIds_args args = new getEmpByEmpIds_args();
      args.setEmployeeIds(employeeIds);
      sendBase("getEmpByEmpIds", args);
    }

    public java.util.List<EmployeePb> recv_getEmpByEmpIds() throws org.apache.thrift.TException
    {
      getEmpByEmpIds_result result = new getEmpByEmpIds_result();
      receiveBase(result, "getEmpByEmpIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmpByEmpIds failed: unknown result");
    }

    public EmployeePb getEmpByEmpId(java.lang.String employeeId, java.lang.String employeeCode) throws org.apache.thrift.TException
    {
      send_getEmpByEmpId(employeeId, employeeCode);
      return recv_getEmpByEmpId();
    }

    public void send_getEmpByEmpId(java.lang.String employeeId, java.lang.String employeeCode) throws org.apache.thrift.TException
    {
      getEmpByEmpId_args args = new getEmpByEmpId_args();
      args.setEmployeeId(employeeId);
      args.setEmployeeCode(employeeCode);
      sendBase("getEmpByEmpId", args);
    }

    public EmployeePb recv_getEmpByEmpId() throws org.apache.thrift.TException
    {
      getEmpByEmpId_result result = new getEmpByEmpId_result();
      receiveBase(result, "getEmpByEmpId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmpByEmpId failed: unknown result");
    }

    public void saveEmployee(EmployeePb employeePb) throws org.apache.thrift.TException
    {
      send_saveEmployee(employeePb);
      recv_saveEmployee();
    }

    public void send_saveEmployee(EmployeePb employeePb) throws org.apache.thrift.TException
    {
      saveEmployee_args args = new saveEmployee_args();
      args.setEmployeePb(employeePb);
      sendBase("saveEmployee", args);
    }

    public void recv_saveEmployee() throws org.apache.thrift.TException
    {
      saveEmployee_result result = new saveEmployee_result();
      receiveBase(result, "saveEmployee");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getEmpByEmpIds(java.util.List<java.lang.String> employeeIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeePb>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmpByEmpIds_call method_call = new getEmpByEmpIds_call(employeeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmpByEmpIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<EmployeePb>> {
      private java.util.List<java.lang.String> employeeIds;
      public getEmpByEmpIds_call(java.util.List<java.lang.String> employeeIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeePb>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeIds = employeeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmpByEmpIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmpByEmpIds_args args = new getEmpByEmpIds_args();
        args.setEmployeeIds(employeeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<EmployeePb> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmpByEmpIds();
      }
    }

    public void getEmpByEmpId(java.lang.String employeeId, java.lang.String employeeCode, org.apache.thrift.async.AsyncMethodCallback<EmployeePb> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmpByEmpId_call method_call = new getEmpByEmpId_call(employeeId, employeeCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmpByEmpId_call extends org.apache.thrift.async.TAsyncMethodCall<EmployeePb> {
      private java.lang.String employeeId;
      private java.lang.String employeeCode;
      public getEmpByEmpId_call(java.lang.String employeeId, java.lang.String employeeCode, org.apache.thrift.async.AsyncMethodCallback<EmployeePb> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.employeeCode = employeeCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmpByEmpId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmpByEmpId_args args = new getEmpByEmpId_args();
        args.setEmployeeId(employeeId);
        args.setEmployeeCode(employeeCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EmployeePb getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmpByEmpId();
      }
    }

    public void saveEmployee(EmployeePb employeePb, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveEmployee_call method_call = new saveEmployee_call(employeePb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private EmployeePb employeePb;
      public saveEmployee_call(EmployeePb employeePb, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeePb = employeePb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveEmployee_args args = new saveEmployee_args();
        args.setEmployeePb(employeePb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getEmpByEmpIds", new getEmpByEmpIds());
      processMap.put("getEmpByEmpId", new getEmpByEmpId());
      processMap.put("saveEmployee", new saveEmployee());
      return processMap;
    }

    public static class getEmpByEmpIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmpByEmpIds_args> {
      public getEmpByEmpIds() {
        super("getEmpByEmpIds");
      }

      public getEmpByEmpIds_args getEmptyArgsInstance() {
        return new getEmpByEmpIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getEmpByEmpIds_result getResult(I iface, getEmpByEmpIds_args args) throws org.apache.thrift.TException {
        getEmpByEmpIds_result result = new getEmpByEmpIds_result();
        result.success = iface.getEmpByEmpIds(args.employeeIds);
        return result;
      }
    }

    public static class getEmpByEmpId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmpByEmpId_args> {
      public getEmpByEmpId() {
        super("getEmpByEmpId");
      }

      public getEmpByEmpId_args getEmptyArgsInstance() {
        return new getEmpByEmpId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getEmpByEmpId_result getResult(I iface, getEmpByEmpId_args args) throws org.apache.thrift.TException {
        getEmpByEmpId_result result = new getEmpByEmpId_result();
        result.success = iface.getEmpByEmpId(args.employeeId, args.employeeCode);
        return result;
      }
    }

    public static class saveEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveEmployee_args> {
      public saveEmployee() {
        super("saveEmployee");
      }

      public saveEmployee_args getEmptyArgsInstance() {
        return new saveEmployee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public saveEmployee_result getResult(I iface, saveEmployee_args args) throws org.apache.thrift.TException {
        saveEmployee_result result = new saveEmployee_result();
        iface.saveEmployee(args.employeePb);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getEmpByEmpIds", new getEmpByEmpIds());
      processMap.put("getEmpByEmpId", new getEmpByEmpId());
      processMap.put("saveEmployee", new saveEmployee());
      return processMap;
    }

    public static class getEmpByEmpIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmpByEmpIds_args, java.util.List<EmployeePb>> {
      public getEmpByEmpIds() {
        super("getEmpByEmpIds");
      }

      public getEmpByEmpIds_args getEmptyArgsInstance() {
        return new getEmpByEmpIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeePb>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeePb>>() { 
          public void onComplete(java.util.List<EmployeePb> o) {
            getEmpByEmpIds_result result = new getEmpByEmpIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEmpByEmpIds_result result = new getEmpByEmpIds_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmpByEmpIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeePb>> resultHandler) throws org.apache.thrift.TException {
        iface.getEmpByEmpIds(args.employeeIds,resultHandler);
      }
    }

    public static class getEmpByEmpId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmpByEmpId_args, EmployeePb> {
      public getEmpByEmpId() {
        super("getEmpByEmpId");
      }

      public getEmpByEmpId_args getEmptyArgsInstance() {
        return new getEmpByEmpId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<EmployeePb> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<EmployeePb>() { 
          public void onComplete(EmployeePb o) {
            getEmpByEmpId_result result = new getEmpByEmpId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEmpByEmpId_result result = new getEmpByEmpId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmpByEmpId_args args, org.apache.thrift.async.AsyncMethodCallback<EmployeePb> resultHandler) throws org.apache.thrift.TException {
        iface.getEmpByEmpId(args.employeeId, args.employeeCode,resultHandler);
      }
    }

    public static class saveEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveEmployee_args, Void> {
      public saveEmployee() {
        super("saveEmployee");
      }

      public saveEmployee_args getEmptyArgsInstance() {
        return new saveEmployee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveEmployee_result result = new saveEmployee_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveEmployee_result result = new saveEmployee_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.saveEmployee(args.employeePb,resultHandler);
      }
    }

  }

  public static class getEmpByEmpIds_args implements org.apache.thrift.TBase<getEmpByEmpIds_args, getEmpByEmpIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmpByEmpIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmpByEmpIds_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmpByEmpIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmpByEmpIds_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> employeeIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_IDS((short)1, "employeeIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_IDS
            return EMPLOYEE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_IDS, new org.apache.thrift.meta_data.FieldMetaData("employeeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmpByEmpIds_args.class, metaDataMap);
    }

    public getEmpByEmpIds_args() {
    }

    public getEmpByEmpIds_args(
      java.util.List<java.lang.String> employeeIds)
    {
      this();
      this.employeeIds = employeeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmpByEmpIds_args(getEmpByEmpIds_args other) {
      if (other.isSetEmployeeIds()) {
        java.util.List<java.lang.String> __this__employeeIds = new java.util.ArrayList<java.lang.String>(other.employeeIds);
        this.employeeIds = __this__employeeIds;
      }
    }

    public getEmpByEmpIds_args deepCopy() {
      return new getEmpByEmpIds_args(this);
    }

    @Override
    public void clear() {
      this.employeeIds = null;
    }

    public int getEmployeeIdsSize() {
      return (this.employeeIds == null) ? 0 : this.employeeIds.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getEmployeeIdsIterator() {
      return (this.employeeIds == null) ? null : this.employeeIds.iterator();
    }

    public void addToEmployeeIds(java.lang.String elem) {
      if (this.employeeIds == null) {
        this.employeeIds = new java.util.ArrayList<java.lang.String>();
      }
      this.employeeIds.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getEmployeeIds() {
      return this.employeeIds;
    }

    public getEmpByEmpIds_args setEmployeeIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> employeeIds) {
      this.employeeIds = employeeIds;
      return this;
    }

    public void unsetEmployeeIds() {
      this.employeeIds = null;
    }

    /** Returns true if field employeeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeIds() {
      return this.employeeIds != null;
    }

    public void setEmployeeIdsIsSet(boolean value) {
      if (!value) {
        this.employeeIds = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_IDS:
        if (value == null) {
          unsetEmployeeIds();
        } else {
          setEmployeeIds((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_IDS:
        return getEmployeeIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_IDS:
        return isSetEmployeeIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmpByEmpIds_args)
        return this.equals((getEmpByEmpIds_args)that);
      return false;
    }

    public boolean equals(getEmpByEmpIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeIds = true && this.isSetEmployeeIds();
      boolean that_present_employeeIds = true && that.isSetEmployeeIds();
      if (this_present_employeeIds || that_present_employeeIds) {
        if (!(this_present_employeeIds && that_present_employeeIds))
          return false;
        if (!this.employeeIds.equals(that.employeeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeIds()) ? 131071 : 524287);
      if (isSetEmployeeIds())
        hashCode = hashCode * 8191 + employeeIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmpByEmpIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeIds()).compareTo(other.isSetEmployeeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeIds, other.employeeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmpByEmpIds_args(");
      boolean first = true;

      sb.append("employeeIds:");
      if (this.employeeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmpByEmpIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpIds_argsStandardScheme getScheme() {
        return new getEmpByEmpIds_argsStandardScheme();
      }
    }

    private static class getEmpByEmpIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmpByEmpIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmpByEmpIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.employeeIds = new java.util.ArrayList<java.lang.String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.employeeIds.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setEmployeeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmpByEmpIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeIds != null) {
          oprot.writeFieldBegin(EMPLOYEE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.employeeIds.size()));
            for (java.lang.String _iter3 : struct.employeeIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmpByEmpIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpIds_argsTupleScheme getScheme() {
        return new getEmpByEmpIds_argsTupleScheme();
      }
    }

    private static class getEmpByEmpIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmpByEmpIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeIds()) {
          {
            oprot.writeI32(struct.employeeIds.size());
            for (java.lang.String _iter4 : struct.employeeIds)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.employeeIds = new java.util.ArrayList<java.lang.String>(_list5.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.employeeIds.add(_elem6);
            }
          }
          struct.setEmployeeIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEmpByEmpIds_result implements org.apache.thrift.TBase<getEmpByEmpIds_result, getEmpByEmpIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmpByEmpIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmpByEmpIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmpByEmpIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmpByEmpIds_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<EmployeePb> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "EmployeePb"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmpByEmpIds_result.class, metaDataMap);
    }

    public getEmpByEmpIds_result() {
    }

    public getEmpByEmpIds_result(
      java.util.List<EmployeePb> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmpByEmpIds_result(getEmpByEmpIds_result other) {
      if (other.isSetSuccess()) {
        java.util.List<EmployeePb> __this__success = new java.util.ArrayList<EmployeePb>(other.success.size());
        for (EmployeePb other_element : other.success) {
          __this__success.add(new EmployeePb(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEmpByEmpIds_result deepCopy() {
      return new getEmpByEmpIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<EmployeePb> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EmployeePb elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<EmployeePb>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<EmployeePb> getSuccess() {
      return this.success;
    }

    public getEmpByEmpIds_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<EmployeePb> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<EmployeePb>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmpByEmpIds_result)
        return this.equals((getEmpByEmpIds_result)that);
      return false;
    }

    public boolean equals(getEmpByEmpIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmpByEmpIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmpByEmpIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmpByEmpIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpIds_resultStandardScheme getScheme() {
        return new getEmpByEmpIds_resultStandardScheme();
      }
    }

    private static class getEmpByEmpIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmpByEmpIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmpByEmpIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<EmployeePb>(_list8.size);
                  @org.apache.thrift.annotation.Nullable EmployeePb _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new EmployeePb();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmpByEmpIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EmployeePb _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmpByEmpIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpIds_resultTupleScheme getScheme() {
        return new getEmpByEmpIds_resultTupleScheme();
      }
    }

    private static class getEmpByEmpIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmpByEmpIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EmployeePb _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<EmployeePb>(_list13.size);
            @org.apache.thrift.annotation.Nullable EmployeePb _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new EmployeePb();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEmpByEmpId_args implements org.apache.thrift.TBase<getEmpByEmpId_args, getEmpByEmpId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmpByEmpId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmpByEmpId_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EMPLOYEE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmpByEmpId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmpByEmpId_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String employeeId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String employeeCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      EMPLOYEE_CODE((short)2, "employeeCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // EMPLOYEE_CODE
            return EMPLOYEE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMPLOYEE_CODE, new org.apache.thrift.meta_data.FieldMetaData("employeeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmpByEmpId_args.class, metaDataMap);
    }

    public getEmpByEmpId_args() {
    }

    public getEmpByEmpId_args(
      java.lang.String employeeId,
      java.lang.String employeeCode)
    {
      this();
      this.employeeId = employeeId;
      this.employeeCode = employeeCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmpByEmpId_args(getEmpByEmpId_args other) {
      if (other.isSetEmployeeId()) {
        this.employeeId = other.employeeId;
      }
      if (other.isSetEmployeeCode()) {
        this.employeeCode = other.employeeCode;
      }
    }

    public getEmpByEmpId_args deepCopy() {
      return new getEmpByEmpId_args(this);
    }

    @Override
    public void clear() {
      this.employeeId = null;
      this.employeeCode = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEmployeeId() {
      return this.employeeId;
    }

    public getEmpByEmpId_args setEmployeeId(@org.apache.thrift.annotation.Nullable java.lang.String employeeId) {
      this.employeeId = employeeId;
      return this;
    }

    public void unsetEmployeeId() {
      this.employeeId = null;
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return this.employeeId != null;
    }

    public void setEmployeeIdIsSet(boolean value) {
      if (!value) {
        this.employeeId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEmployeeCode() {
      return this.employeeCode;
    }

    public getEmpByEmpId_args setEmployeeCode(@org.apache.thrift.annotation.Nullable java.lang.String employeeCode) {
      this.employeeCode = employeeCode;
      return this;
    }

    public void unsetEmployeeCode() {
      this.employeeCode = null;
    }

    /** Returns true if field employeeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeCode() {
      return this.employeeCode != null;
    }

    public void setEmployeeCodeIsSet(boolean value) {
      if (!value) {
        this.employeeCode = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.String)value);
        }
        break;

      case EMPLOYEE_CODE:
        if (value == null) {
          unsetEmployeeCode();
        } else {
          setEmployeeCode((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case EMPLOYEE_CODE:
        return getEmployeeCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case EMPLOYEE_CODE:
        return isSetEmployeeCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmpByEmpId_args)
        return this.equals((getEmpByEmpId_args)that);
      return false;
    }

    public boolean equals(getEmpByEmpId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true && this.isSetEmployeeId();
      boolean that_present_employeeId = true && that.isSetEmployeeId();
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (!this.employeeId.equals(that.employeeId))
          return false;
      }

      boolean this_present_employeeCode = true && this.isSetEmployeeCode();
      boolean that_present_employeeCode = true && that.isSetEmployeeCode();
      if (this_present_employeeCode || that_present_employeeCode) {
        if (!(this_present_employeeCode && that_present_employeeCode))
          return false;
        if (!this.employeeCode.equals(that.employeeCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeId()) ? 131071 : 524287);
      if (isSetEmployeeId())
        hashCode = hashCode * 8191 + employeeId.hashCode();

      hashCode = hashCode * 8191 + ((isSetEmployeeCode()) ? 131071 : 524287);
      if (isSetEmployeeCode())
        hashCode = hashCode * 8191 + employeeCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmpByEmpId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeCode()).compareTo(other.isSetEmployeeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeCode, other.employeeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmpByEmpId_args(");
      boolean first = true;

      sb.append("employeeId:");
      if (this.employeeId == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("employeeCode:");
      if (this.employeeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmpByEmpId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpId_argsStandardScheme getScheme() {
        return new getEmpByEmpId_argsStandardScheme();
      }
    }

    private static class getEmpByEmpId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmpByEmpId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmpByEmpId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.employeeId = iprot.readString();
                struct.setEmployeeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMPLOYEE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.employeeCode = iprot.readString();
                struct.setEmployeeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmpByEmpId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeId != null) {
          oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
          oprot.writeString(struct.employeeId);
          oprot.writeFieldEnd();
        }
        if (struct.employeeCode != null) {
          oprot.writeFieldBegin(EMPLOYEE_CODE_FIELD_DESC);
          oprot.writeString(struct.employeeCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmpByEmpId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpId_argsTupleScheme getScheme() {
        return new getEmpByEmpId_argsTupleScheme();
      }
    }

    private static class getEmpByEmpId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmpByEmpId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetEmployeeCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmployeeId()) {
          oprot.writeString(struct.employeeId);
        }
        if (struct.isSetEmployeeCode()) {
          oprot.writeString(struct.employeeCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readString();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.employeeCode = iprot.readString();
          struct.setEmployeeCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEmpByEmpId_result implements org.apache.thrift.TBase<getEmpByEmpId_result, getEmpByEmpId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmpByEmpId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmpByEmpId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmpByEmpId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmpByEmpId_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable EmployeePb success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "EmployeePb")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmpByEmpId_result.class, metaDataMap);
    }

    public getEmpByEmpId_result() {
    }

    public getEmpByEmpId_result(
      EmployeePb success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmpByEmpId_result(getEmpByEmpId_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmployeePb(other.success);
      }
    }

    public getEmpByEmpId_result deepCopy() {
      return new getEmpByEmpId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public EmployeePb getSuccess() {
      return this.success;
    }

    public getEmpByEmpId_result setSuccess(@org.apache.thrift.annotation.Nullable EmployeePb success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EmployeePb)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmpByEmpId_result)
        return this.equals((getEmpByEmpId_result)that);
      return false;
    }

    public boolean equals(getEmpByEmpId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmpByEmpId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmpByEmpId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmpByEmpId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpId_resultStandardScheme getScheme() {
        return new getEmpByEmpId_resultStandardScheme();
      }
    }

    private static class getEmpByEmpId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmpByEmpId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmpByEmpId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EmployeePb();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmpByEmpId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmpByEmpId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmpByEmpId_resultTupleScheme getScheme() {
        return new getEmpByEmpId_resultTupleScheme();
      }
    }

    private static class getEmpByEmpId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmpByEmpId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmpByEmpId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new EmployeePb();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveEmployee_args implements org.apache.thrift.TBase<saveEmployee_args, saveEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveEmployee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveEmployee_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_PB_FIELD_DESC = new org.apache.thrift.protocol.TField("employeePb", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveEmployee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveEmployee_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable EmployeePb employeePb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_PB((short)1, "employeePb");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_PB
            return EMPLOYEE_PB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_PB, new org.apache.thrift.meta_data.FieldMetaData("employeePb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "EmployeePb")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveEmployee_args.class, metaDataMap);
    }

    public saveEmployee_args() {
    }

    public saveEmployee_args(
      EmployeePb employeePb)
    {
      this();
      this.employeePb = employeePb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveEmployee_args(saveEmployee_args other) {
      if (other.isSetEmployeePb()) {
        this.employeePb = new EmployeePb(other.employeePb);
      }
    }

    public saveEmployee_args deepCopy() {
      return new saveEmployee_args(this);
    }

    @Override
    public void clear() {
      this.employeePb = null;
    }

    @org.apache.thrift.annotation.Nullable
    public EmployeePb getEmployeePb() {
      return this.employeePb;
    }

    public saveEmployee_args setEmployeePb(@org.apache.thrift.annotation.Nullable EmployeePb employeePb) {
      this.employeePb = employeePb;
      return this;
    }

    public void unsetEmployeePb() {
      this.employeePb = null;
    }

    /** Returns true if field employeePb is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeePb() {
      return this.employeePb != null;
    }

    public void setEmployeePbIsSet(boolean value) {
      if (!value) {
        this.employeePb = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_PB:
        if (value == null) {
          unsetEmployeePb();
        } else {
          setEmployeePb((EmployeePb)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_PB:
        return getEmployeePb();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_PB:
        return isSetEmployeePb();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveEmployee_args)
        return this.equals((saveEmployee_args)that);
      return false;
    }

    public boolean equals(saveEmployee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeePb = true && this.isSetEmployeePb();
      boolean that_present_employeePb = true && that.isSetEmployeePb();
      if (this_present_employeePb || that_present_employeePb) {
        if (!(this_present_employeePb && that_present_employeePb))
          return false;
        if (!this.employeePb.equals(that.employeePb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeePb()) ? 131071 : 524287);
      if (isSetEmployeePb())
        hashCode = hashCode * 8191 + employeePb.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveEmployee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeePb()).compareTo(other.isSetEmployeePb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeePb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeePb, other.employeePb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveEmployee_args(");
      boolean first = true;

      sb.append("employeePb:");
      if (this.employeePb == null) {
        sb.append("null");
      } else {
        sb.append(this.employeePb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveEmployee_argsStandardScheme getScheme() {
        return new saveEmployee_argsStandardScheme();
      }
    }

    private static class saveEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveEmployee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_PB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.employeePb = new EmployeePb();
                struct.employeePb.read(iprot);
                struct.setEmployeePbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveEmployee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeePb != null) {
          oprot.writeFieldBegin(EMPLOYEE_PB_FIELD_DESC);
          struct.employeePb.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveEmployee_argsTupleScheme getScheme() {
        return new saveEmployee_argsTupleScheme();
      }
    }

    private static class saveEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveEmployee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeePb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeePb()) {
          struct.employeePb.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeePb = new EmployeePb();
          struct.employeePb.read(iprot);
          struct.setEmployeePbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveEmployee_result implements org.apache.thrift.TBase<saveEmployee_result, saveEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveEmployee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveEmployee_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveEmployee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveEmployee_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveEmployee_result.class, metaDataMap);
    }

    public saveEmployee_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveEmployee_result(saveEmployee_result other) {
    }

    public saveEmployee_result deepCopy() {
      return new saveEmployee_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveEmployee_result)
        return this.equals((saveEmployee_result)that);
      return false;
    }

    public boolean equals(saveEmployee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(saveEmployee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveEmployee_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveEmployee_resultStandardScheme getScheme() {
        return new saveEmployee_resultStandardScheme();
      }
    }

    private static class saveEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveEmployee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveEmployee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveEmployee_resultTupleScheme getScheme() {
        return new saveEmployee_resultTupleScheme();
      }
    }

    private static class saveEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveEmployee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
